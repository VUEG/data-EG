import glob

## GLOBALS --------------------------------------------------------------------

DATASETS = ['air_quality']

## FUNCTIONS ------------------------------------------------------------------

def convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

## RULES ----------------------------------------------------------------------

rule all:
  input:
    expand("data/air_quality/{dataset}.{ext}", dataset=DATASETS,
           ext=['tif'])

# Rule to extract the data from from the zip archive.
rule extract:
    input:
        "data/org/Air_quality_NO2.zip"
    output:
        temp("data/org/air_quality")
    log:
        "log/extract.log"
    message: "Extracting raster(s) from {input}."
    run:
        shell("unzip -o {} -d {} >& {}".format(input[0], output[0], log[0]))

# Rule to translate all rasters using compression. Also, translation makes
# the use of TFW files unnecessary. Rename the files at the same time: get rid
# of of whitespaces and put names in full lower case.
rule translate:
    input:
        rules.extract.output
    output:
        rules.all.input
    log:
        "log/translate.log"
    message: "Translating files in {input}"
    run:
        src_raster = os.path.join(input[0], "Air_quality_NO2", "dvno2_2010")
        # Clean the log
        shell('echo "" > {0} 2>&1'.format(log))
        # Traslate using gdal_translate, comress using DEFLATE
        shell('echo "Traslating {0} to {1}" >> {2} 2>&1'.format(src_raster, output[0], log))
        shell("gdal_translate -of GTiff -co COMPRESS=DEFLATE '{0}' '{1}' >> {2} 2>&1".format(src_raster, output[0], log))
